// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebAPI.Models.ChatRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId", "Type");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("WebAPI.Models.DeviceUsed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateTokenProvided")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Language")
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<string>("PushNotificationToken")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId", "Platform")
                        .IsUnique();

                    b.ToTable("DevicesUsed");
                });

            modelBuilder.Entity("WebAPI.Models.FileModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUploaded")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<long>("UploaderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("WebAPI.Models.GroupProfile", b =>
                {
                    b.Property<long>("ChatRoomId")
                        .HasColumnType("bigint");

                    b.Property<string>("About")
                        .HasMaxLength(4095)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<string>("JoinToken")
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<long?>("PhotoFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WallpaperFileId")
                        .HasColumnType("bigint");

                    b.HasKey("ChatRoomId");

                    b.HasIndex("PhotoFileId");

                    b.HasIndex("WallpaperFileId");

                    b.ToTable("GroupProfiles");
                });

            modelBuilder.Entity("WebAPI.Models.MessageReceived", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateRead")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateReceived")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateStarred")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("MessageSentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MessageSentId");

                    b.HasIndex("ReceiverId", "MessageSentId")
                        .IsUnique();

                    b.ToTable("MessagesReceived");
                });

            modelBuilder.Entity("WebAPI.Models.MessageSent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateSent")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateStarred")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinkedId")
                        .HasColumnType("bigint");

                    b.Property<long>("MessageTagId")
                        .HasColumnType("bigint");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FileId");

                    b.HasIndex("LinkedId");

                    b.HasIndex("MessageTagId");

                    b.HasIndex("SenderId");

                    b.ToTable("MessagesSent");
                });

            modelBuilder.Entity("WebAPI.Models.MessageTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ChatRoomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ChatRoomId", "Name")
                        .IsUnique();

                    b.ToTable("MessageTags");
                });

            modelBuilder.Entity("WebAPI.Models.UserChatRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BlockerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatRoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateBlocked")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateExited")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateMuted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DatePinned")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdderId");

                    b.HasIndex("BlockerId");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserProfileId", "ChatRoomId")
                        .IsUnique();

                    b.ToTable("UserChatRooms");
                });

            modelBuilder.Entity("WebAPI.Models.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("About")
                        .HasMaxLength(4095)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastConnected")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<long?>("PhotoFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WallpaperFileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("PhotoFileId");

                    b.HasIndex("WallpaperFileId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("WebAPI.Models.ChatRoom", b =>
                {
                    b.HasOne("WebAPI.Models.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WebAPI.Models.DeviceUsed", b =>
                {
                    b.HasOne("WebAPI.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("WebAPI.Models.GroupProfile", b =>
                {
                    b.HasOne("WebAPI.Models.ChatRoom", null)
                        .WithOne("GroupProfile")
                        .HasForeignKey("WebAPI.Models.GroupProfile", "ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.FileModel", "PhotoFile")
                        .WithMany()
                        .HasForeignKey("PhotoFileId");

                    b.HasOne("WebAPI.Models.FileModel", "WallpaperFile")
                        .WithMany()
                        .HasForeignKey("WallpaperFileId");

                    b.Navigation("PhotoFile");

                    b.Navigation("WallpaperFile");
                });

            modelBuilder.Entity("WebAPI.Models.MessageReceived", b =>
                {
                    b.HasOne("WebAPI.Models.MessageSent", "MessageSent")
                        .WithMany()
                        .HasForeignKey("MessageSentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.UserChatRoom", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSent");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("WebAPI.Models.MessageSent", b =>
                {
                    b.HasOne("WebAPI.Models.UserProfile", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("WebAPI.Models.FileModel", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("WebAPI.Models.MessageSent", "Linked")
                        .WithMany()
                        .HasForeignKey("LinkedId");

                    b.HasOne("WebAPI.Models.MessageTag", "MessageTag")
                        .WithMany()
                        .HasForeignKey("MessageTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.UserChatRoom", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Author");

                    b.Navigation("File");

                    b.Navigation("Linked");

                    b.Navigation("MessageTag");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebAPI.Models.MessageTag", b =>
                {
                    b.HasOne("WebAPI.Models.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.UserChatRoom", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("WebAPI.Models.MessageTag", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ChatRoom");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebAPI.Models.UserChatRoom", b =>
                {
                    b.HasOne("WebAPI.Models.UserProfile", "Adder")
                        .WithMany()
                        .HasForeignKey("AdderId");

                    b.HasOne("WebAPI.Models.UserProfile", "Blocker")
                        .WithMany()
                        .HasForeignKey("BlockerId");

                    b.HasOne("WebAPI.Models.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adder");

                    b.Navigation("Blocker");

                    b.Navigation("ChatRoom");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("WebAPI.Models.UserProfile", b =>
                {
                    b.HasOne("WebAPI.Models.FileModel", "PhotoFile")
                        .WithMany()
                        .HasForeignKey("PhotoFileId");

                    b.HasOne("WebAPI.Models.FileModel", "WallpaperFile")
                        .WithMany()
                        .HasForeignKey("WallpaperFileId");

                    b.Navigation("PhotoFile");

                    b.Navigation("WallpaperFile");
                });

            modelBuilder.Entity("WebAPI.Models.ChatRoom", b =>
                {
                    b.Navigation("GroupProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
